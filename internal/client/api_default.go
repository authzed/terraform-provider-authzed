/*
some test API

this is a test API ![](https://commonmark.org/help/images/favicon.png)

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// DefaultAPIService DefaultAPI service
type DefaultAPIService service

type ApiSayHelloRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	xAPIVersion *string
	v20241017SayHelloRequest *V20241017SayHelloRequest
}

// The version of the API to use. Must be specified.
func (r ApiSayHelloRequest) XAPIVersion(xAPIVersion string) ApiSayHelloRequest {
	r.xAPIVersion = &xAPIVersion
	return r
}

func (r ApiSayHelloRequest) V20241017SayHelloRequest(v20241017SayHelloRequest V20241017SayHelloRequest) ApiSayHelloRequest {
	r.v20241017SayHelloRequest = &v20241017SayHelloRequest
	return r
}

func (r ApiSayHelloRequest) Execute() (*V20241017SayHelloResponse, *http.Response, error) {
	return r.ApiService.SayHelloExecute(r)
}

/*
SayHello Method for SayHello

Say hello.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSayHelloRequest
*/
func (a *DefaultAPIService) SayHello(ctx context.Context) ApiSayHelloRequest {
	return ApiSayHelloRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return V20241017SayHelloResponse
func (a *DefaultAPIService) SayHelloExecute(r ApiSayHelloRequest) (*V20241017SayHelloResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V20241017SayHelloResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.SayHello")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hello"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAPIVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-API-Version", r.xAPIVersion, "simple", "")
	}
	// body params
	localVarPostBody = r.v20241017SayHelloRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
